+ True if-so: true-block if-not: false-block
  true-block value
!
+ True if-so: true-block
  true-block value
!
+ False if-so: true-block if-not: false-block
  false-block value
!
+ False if-so: true-block
  nil
!
+ Tutorial part1

-- Don't try to run this.
!
+ Number factorial

me = 0 
	if-so: {1}
	if-not: {me * (me - 1) factorial}
!
> Make-class named: 'Counting-up' with-slots: 'i bound step'
!
+ Counting-up from: i
  my i := i
!
+ Counting-up by: step
  my step := step
!
+ Counting-up till: bound
  my bound := bound
!
+ Counting-up thru: bound
  my bound := bound + my step
!
+ Counting-up do: block
  (my i < my bound)
      if-so: {block value: my i.
              my i := my i + my step.
              I do: block}
!
+ Number till: bound by: step do: block
--  (Counting-up new by: step; from: me; till: bound do: block
  Counting-up new by: step; from: me; till: bound; do: block
!
+ Number till: bound do: block
  me till: bound by: 1 do: block
!
+ Number thru: last by: step do: block
  (Counting-up new by: step; from: me; thru: last) do: block
!
+ Number thru: last do: block
  me thru: last by: 1 do: block
!
+ Number times-do: block
  0 till: me do: {:ignore | block value}
!
> Make-class named: 'Log-class' with-slots: 'chunks'
!
+ Log-class clear
  my chunks := []
!
+ Log-class show
  '' join: my chunks
!
+ Log-class nl
  my chunks append: '
' -- TODO '\n' literal
!
+ Log-class say: x
  my chunks append: x string    -- TODO string method
!
> Globals at: 'Log' adjoin: Log-class new.
Log clear.
!
+ Array fill-with: value
  0 till: me size do: { :i | me at: i put: value }
!
> Make-class named: 'Demos' with-slots: ''
!
+ Demos sieve
-- Sieve of Eratosthenes benchmark.

| size flags count |

size := 8191.
flags := [nil] * size.

Log say: '1 iterations'; nl.  -- XXX 10

1 times-do: {  -- XXX make this 10
  count := 0.
  flags fill-with: true.
  0 till: size do: { :i |
    (flags at: i) if-so: {
      |prime| prime := i + i + 3.
      (i + prime) till: size by: prime do: { :k |
        flags at: k put: false
      }.
      count := count + 1.
    }.
  }.
}.

Log say: count; say: ' primes'; nl.
!
